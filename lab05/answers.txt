
NOTE:
- Your time complexities should be expressed in big-O notation and be in
  terms of n, where n is the number of people who  have  been  added  to
  Friendbook.

===============
  FbUnfriend
===============

- Worst case time complexity: O(1)

- Explanation: Doesn't need to navigate through a tree or loop (as we can access them directly through arrays). Therefore, its worst case time complexity is the same
               as its best and average case. 

===============
FbMutualFriends
===============

- Worst case time complexity: O(n)

- Explanation: Has to navigate through a loop to look for mutual friends. The worst case is that they are mutual friends with everyone, and so it must loop through n times.

===============
 FbFriendRecs1
===============

- Worst case time complexity: O(2n^2)

- Explanation: Worst case is that there are n amount of individuals that have n mutuals with the given name. This way, it has 2 sets of 2 loops to run through.

